{"version":3,"sources":["img/hand.png","styles.ts","pages/Home/styles.ts","components/TextWithButton/styles.ts","components/TextWithButton/index.ts","components/TextWithButton/TextWithButton.tsx","pages/Home/index.ts","pages/Home/Home.tsx","pages/Game/styles.ts","components/AnswerButtons/styles.ts","components/AnswerButtons/selectors.ts","components/AnswerButtons/components/Button.tsx","components/AnswerButtons/index.ts","components/AnswerButtons/AnswerButton.tsx","components/ScoreButtons/styles.ts","components/ScoreButtons/ScoreButtons.tsx","components/ScoreButtons/index.ts","components/HumburgerButton/style.ts","components/HumburgerButton/index.ts","components/HumburgerButton/HumburgerButton.tsx","pages/Game/selectors.ts","pages/Game/index.ts","pages/Game/Game.tsx","pages/Result/styles.ts","pages/Result/selectors.ts","pages/Result/index.ts","pages/Result/Result.tsx","App.tsx","models/index.ts","models/menu.ts","models/game.ts","models/disableRound.ts","models/round.ts","store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","GlobalStyle","createGlobalStyle","Wrapper","styled","div","BG","Main","Text","Img","Button","button","Title","h1","TextWithButton","title","btnText","useDispatch","game","disableRound","round","to","onClick","localStorage","removeItem","fetchRoundData","setGameData","data","setDisable","Home","src","hand","alt","Menu","Question","Answers","Scoreboard","p","isShow","state","selectState","gameData","disable","name","text","width","height","viewBox","xmlns","d","fill","stroke","dy","x","y","AnswerButton","isRight","useSelector","useState","answer","setAnswer","history","useHistory","finishGame","useCallback","push","updateFn","setRound","levelPassed","setTimeout","className","dominantBaseline","textAnchor","ScoreButtons","Ð¡ontainer","HumburgerButton","changeVisibility","menu","e","currentTarget","classList","toggle","Game","checkPassed","id","findIndex","length","question","answers","map","key","cost","Result","App","useEffect","fetchGameData","path","exact","reducers","slice","setItem","JSON","stringify","payload","localGame","getItem","parse","localRound","store","init","models","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b25f6ff2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hand.45dc5593.png\";","/// <reference types=\"styled-components/cssprop\" />\nimport { createGlobalStyle } from 'styled-components'\n\nconst orange120 = '#E87928'\nconst orange100 = '#FF8B37'\nconst orange80 = '#FFAC70'\nconst orange5 = '#FFF3EB'\nconst green100 = '#47D867'\nconst green5 = '#E6FAEA'\nconst red100 = '#EC6259'\nconst red5 = '#FDEEED'\nconst black100 = '#1C1C21'\nconst black40 = '#D0D0D8'\nconst black5 = '#F5F5F7'\nconst white100 = '#FFFFFF'\n\nconst GlobalStyle = createGlobalStyle`\n  html,\n* {\n  box-sizing: border-box;\n  \n}\nbody {\n  padding: 0;\n  margin: 0;\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n    'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: #f5f5f7;\n}\na {\n  text-decoration: none;\n}\n`\n\n// todo https://styled-components.com/docs/api\nexport {\n  orange120,\n  orange100,\n  orange80,\n  orange5,\n  green100,\n  green5,\n  red100,\n  red5,\n  black100,\n  black40,\n  white100,\n  black5,\n  GlobalStyle,\n}\n","import styled from 'styled-components'\n\nimport { white100, orange5 } from '../../styles'\n\nconst Wrapper = styled.div`\n  background-color: ${white100};\n  width: 100%;\n  height: 100vh;\n  position: relative;\n  z-index: 0;\n`\nconst BG = styled.div`\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 0 0 100vh 100vw;\n  border-color: transparent transparent ${orange5} transparent;\n  position: absolute;\n  z-index: 1;\n`\n\nconst Main = styled.div`\n  position: relative;\n  z-index: 999;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  @media (max-width: 768px) {\n    flex-wrap: wrap;\n    align-items: center;\n  }\n`\n\nconst Text = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 45%;\n  height: 258px;\n  min-width: 300px;\n  @media (min-width: 1921px) {\n    width: 40%;\n  }\n`\nconst Img = styled.div`\n  width: 35%;\n  max-height: 367px;\n  & img {\n    width: 100%;\n  }\n  @media (min-width: 1921px) {\n    width: 30%;\n  }\n  @media (max-width: 768px) {\n    margin-bottom: -150px;\n    width: 90%;\n  }\n`\nexport { Wrapper, Main, Text, Img, BG }\n","import styled from 'styled-components'\n\nimport {\n  orange100,\n  white100,\n  orange80,\n  orange120,\n  black100,\n} from '../../styles'\n// todo, TextWit....styles.ts\n\nconst Main = styled.div`\n  @media (max-width: 768px) {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n  }\n`\nconst Button = styled.button`\n  background: ${orange100};\n  border-radius: 12px;\n  height: 64px;\n  width: 296px;\n  color: ${white100};\n  font-weight: 600;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  transition: 100ms ease-in-out;\n  @media (max-width: 768px) {\n    margin-top: 70px;\n  }\n  @media (min-width: 1921px) {\n    font-size: 1vw;\n    width: 15vw;\n  }\n  &:hover {\n    background: ${orange80};\n  }\n  &:active {\n    background: ${orange120};\n  }\n`\nconst Title = styled.h1`\n  color: ${black100};\n  line-height: 116%;\n  font-weight: 600;\n  max-width: 624px;\n  font-size: 56px;\n  @media (min-width: 1921px) {\n    font-size: 3vw;\n  }\n  @media (max-width: 768px) {\n    text-align: center;\n  }\n  @media (max-width: 576px) {\n    font-size: 32px;\n    text-align: center;\n  }\n`\n\nexport { Main, Button, Title }\n","import TextWithButton from './TextWithButton'\n\nexport default TextWithButton\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\n\nimport { Dispatch } from '../../store'\nimport { ITextWithButtonProps } from './types'\nimport { Main, Button, Title } from './styles'\nimport data from '../../game.json'\nimport { Game } from '../../models/game'\n\nconst TextWithButton: React.FC<ITextWithButtonProps> = ({\n  title,\n  btnText,\n}: ITextWithButtonProps) => {\n  const { game, disableRound, round } = useDispatch<Dispatch>()\n  const handleClick = () => {\n    localStorage.removeItem('game')\n    localStorage.removeItem('round')\n    round.fetchRoundData()\n    game.setGameData((data as unknown) as Game)\n    disableRound.setDisable(false)\n  }\n  return (\n    <Main>\n      <Title>{title}</Title>\n      <Link to='/game'>\n        <Button onClick={handleClick}>{btnText}</Button>\n      </Link>\n    </Main>\n  )\n}\n\nexport default TextWithButton\n","import Home from './Home'\n\nexport default Home\n","import React from 'react'\n\nimport { Wrapper, Main, Text, Img, BG } from './styles'\nimport hand from '../../img/hand.png'\nimport TextWithButton from '../../components/TextWithButton'\n\nconst Home: React.FC = () => {\n  return (\n    <Wrapper>\n      <BG />\n      <Main>\n        <Img>\n          <img src={hand} alt='hand' />\n        </Img>\n        <Text>\n          <TextWithButton\n            title='Who wants to be aÂ millionaire?'\n            btnText='Start'\n          />\n        </Text>\n      </Main>\n    </Wrapper>\n  )\n}\n\nexport default Home\n","import styled from 'styled-components'\n\nimport { black100 } from '../../styles'\n\ninterface IProps {\n  isShow: boolean\n}\n\nconst Wrapper = styled.div`\n  width: 100%;\n  max-width: 1440px;\n  height: 100vh;\n  display: flex;\n  margin: 0 auto;\n  justify-content: space-between;\n  padding-bottom: 100px;\n  position: relative;\n  height: 100vh;\n  @media (max-width: 768px) {\n    padding: 0;\n  }\n`\nconst Menu = styled.div`\n  width: 100%;\n  padding: 10px;\n  display: none;\n  z-index: 9999;\n  @media (max-width: 768px) {\n    display: flex;\n    justify-content: flex-end;\n  }\n`\nconst Main = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 845px;\n  min-width: 300px;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding-top: 130px;\n  @media (max-width: 1170px) {\n    padding-top: 0;\n  }\n  @media (max-height: 768px) {\n    justify-content: space-between;\n  }\n`\n\nconst Question = styled.div`\n  & h1 {\n    font-weight: 600;\n    font-size: 32px;\n    color: ${black100};\n  }\n  min-width: 300px;\n  @media (max-width: 768px) {\n    padding: 0 16px;\n    text-align: center;\n    & h1 {\n      font-size: 18px;\n    }\n  }\n`\nconst Answers = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: flex-start;\n  width: 100%;\n  min-width: 300px;\n  overflow: hidden;\n  & > button {\n    margin: 0 16px 32px 16px;\n  }\n  @media (max-width: 1170px) {\n    justify-content: center;\n  }\n  @media (max-width: 768px) {\n    justify-content: center;\n    & > button {\n      margin: 0 8px 15px 8px;\n    }\n  }\n  @media (max-height: 768px) {\n    margin-top: 100px;\n  }\n  @media (max-width: 320px) {\n    margin-top: 50px;\n  }\n`\nconst Scoreboard = styled.div<IProps>`\n  width: 376px;\n  display: flex;\n  justify-content: flex-end;\n  flex-direction: column-reverse;\n  top: 0;\n  right: 0;\n  padding-top: 150px;\n  height: 100vh;\n  background-color: #ffffff;\n  @media (max-width: 768px) {\n    display: ${(p) => (p.isShow ? 'flex' : 'none')};\n    justify-content: center;\n    position: absolute;\n    padding-top: 0;\n    top: 0;\n    right: 0;\n    width: 100%;\n    z-index: 500;\n    height: 100%;\n\n    & button,\n    svg {\n      height: 30px;\n    }\n  }\n  @media (max-height: 768px) {\n    padding-top: 30px;\n  }\n`\nconst Img = styled.div`\n  max-width: 624px;\n  max-height: 367px;\n  & img {\n    width: 100%;\n  }\n  @media (max-width: 768px) {\n    margin-bottom: -150px;\n  }\n`\nexport { Wrapper, Main, Answers, Question, Img, Scoreboard, Menu }\n","/* eslint-disable no-nested-ternary */\nimport styled from 'styled-components'\n\nimport {\n  orange100,\n  black40,\n  black100,\n  orange5,\n  green100,\n  green5,\n  red5,\n  red100,\n} from '../../styles'\n\ninterface IProps {\n  state?: string\n}\n\nconst Button = styled.button<IProps>`\n  height: 72px;\n  width: 373px;\n  min-width: 300px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  position: relative;\n  background-color: transparent;\n  svg {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n  &:hover > svg > path {\n    stroke: ${(p) =>\n      !p.state\n        ? `${orange100}`\n        : p.state === 'correct'\n        ? `${green100}`\n        : `${red100}`};\n  }\n  & > svg > path {\n    stroke: ${(p) =>\n      !p.state ? `` : p.state === 'correct' ? `${green100}` : `${red100}`};\n  }\n  & > svg > text > tspan {\n    fill: ${orange100};\n    font: 600 20px 'Inter';\n  }\n  & > svg > text {\n    fill: ${black100};\n    font: 400 20px 'Inter';\n  }\n  &:active > svg > path {\n    stroke: ${(p) =>\n      !p.state\n        ? `${orange100}`\n        : p.state === 'correct'\n        ? `${green100}`\n        : `${red100}`};\n    fill: ${(p) =>\n      !p.state\n        ? `${orange5}`\n        : p.state === 'correct'\n        ? `${green5}`\n        : `${red5}`};\n  }\n  & > svg > path {\n    fill: ${(p) =>\n      !p.state ? `` : p.state === 'correct' ? `${green5}` : `${red5}`};\n  }\n  & > .hr1,\n  .hr2 {\n    position: absolute;\n    width: 17px;\n    height: 1px;\n    top: 40%;\n    background-color: ${(p) =>\n      !p.state\n        ? `${black40}`\n        : p.state === 'correct'\n        ? `${green100}`\n        : `${red100}`};\n    border: none;\n  }\n  & > .hr1 {\n    left: -16px;\n  }\n  & > .hr2 {\n    right: -16px;\n  }\n  &:hover .hr1,\n  &:hover .hr2,\n  &:active .hr1,\n  &:active .hr2 {\n    background-color: ${(p) =>\n      !p.state\n        ? `${orange100}`\n        : p.state === 'correct'\n        ? `${green100}`\n        : `${red100}`};\n  }\n\n  @media (max-width: 768px) {\n    width: 100%;\n    svg {\n      width: 100%;\n      z-index: 5;\n    }\n    & > .hr1,\n    .hr2 {\n      width: 100%;\n      z-index: 2;\n      top: 40%;\n    }\n  }\n`\n\nexport default Button\n","import { Game } from '../../models/game'\nimport { RootState } from '../../store'\n\nconst selectState = (\n  state: RootState\n): { gameData: Game; disable: boolean } => ({\n  gameData: state.game.gameData,\n  disable: state.disableRound,\n})\n\nexport default selectState\n","import React from 'react'\n\nconst Button: React.FC<{ name: string; text: string }> = ({\n  name,\n  text,\n}: {\n  name: string\n  text: string\n}) => (\n  <svg\n    width='373'\n    height='72'\n    viewBox='0 0 373 72'\n    xmlns='http://www.w3.org/2000/svg'\n  >\n    <path\n      d='M22.7172 5.28344C24.8781 2.28016 28.3521 0.5 32.052 0.5H340.948C344.648 0.5 348.122 2.28015 350.283 5.28343L372.384 36L350.283 66.7166C348.122 69.7198 344.648 71.5 340.948 71.5H32.052C28.3521 71.5 24.8781 69.7198 22.7172 66.7166L0.615976 36L22.7172 5.28344Z'\n      fill='white'\n      stroke='#D0D0D8'\n    />\n\n    <text dy='10%' x='30px' y='50%'>\n      <tspan>{name}</tspan> {text}\n    </text>\n  </svg>\n)\nexport default Button\n","import AnswerButton from './AnswerButton'\n\nexport default AnswerButton\n","import React, { useCallback, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Dispatch } from '../../store'\nimport { IAnswerButtonProps } from './types'\nimport ButtonContainer from './styles'\nimport selectState from './selectors'\nimport Button from './components/Button'\n\nconst AnswerButton: React.FC<IAnswerButtonProps> = ({\n  name,\n  text,\n  isRight,\n}: IAnswerButtonProps) => {\n  const { gameData, disable } = useSelector(selectState)\n  const { disableRound, game, round } = useDispatch<Dispatch>()\n  const [answer, setAnswer] = useState('')\n  const history = useHistory()\n  const finishGame = useCallback(() => {\n    localStorage.removeItem('game')\n    history.push('/result')\n  }, [history])\n  const hendleAnswer = () => {\n    if (disable) return\n\n    disableRound.setDisable(true)\n    let updateFn\n    if (isRight) {\n      round.setRound(gameData[0])\n      setAnswer('correct')\n      updateFn = () => {\n        setAnswer('')\n        disableRound.setDisable(false)\n        game.levelPassed()\n      }\n    } else {\n      setAnswer('warn')\n      updateFn = () => {\n        setAnswer('')\n        finishGame()\n      }\n    }\n    setTimeout(updateFn, 700)\n  }\n  return (\n    <ButtonContainer state={answer} onClick={hendleAnswer}>\n      <Button text={text} name={name} />\n      <hr className='hr1' />\n      <hr className='hr2' />\n    </ButtonContainer>\n  )\n}\n\nexport default AnswerButton\n","/* eslint-disable no-nested-ternary */\nimport styled from 'styled-components'\n\nimport { black40, black100, orange100, black5 } from '../../styles'\n\ninterface IProps {\n  state?: string\n}\n\nconst Button = styled.button<IProps>`\n  width: 100%;\n  height: 40px;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  position: relative;\n  background-color: transparent;\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n  svg {\n    top: 0;\n    left: 0;\n    z-index: 1999;\n  }\n  & > svg > path {\n    stroke: ${(p) =>\n      !p.state ? `` : p.state === 'checked' ? `${orange100}` : `${black5}`};\n  }\n  & > svg > text {\n    fill: ${(p) =>\n      !p.state\n        ? `${black100}`\n        : p.state === 'checked'\n        ? `${orange100}`\n        : `${black40}`};\n    font: 400 20px 'Inter';\n  }\n  & > .hr1,\n  .hr2 {\n    position: absolute;\n    width: 100%;\n    z-index: 10;\n    height: 1px;\n    top: 35%;\n    background-color: ${(p) =>\n      !p.state\n        ? `${black40}`\n        : p.state === 'checked'\n        ? `${orange100}`\n        : `${black5}`};\n    border: none;\n  }\n`\n\nexport default Button\n","import React from 'react'\n\nimport { IAnswerButtonProps } from './types'\nimport ButtonContainer from './styles'\n\nconst Button = ({ text }: { text: string }) => {\n  // todo, move to component\n  return (\n    <svg\n      width='240'\n      height='40'\n      viewBox='0 0 240 40'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path\n        d='M22.2872 0.5H217.713C221.126 0.5 224.362 2.01596 226.547 4.63788L239.349 20L226.547 35.3621C224.362 37.984 221.126 39.5 217.713 39.5H22.2872C18.8742 39.5 15.6375 37.984 13.4526 35.3621L0.650854 20L13.4526 4.63788C15.6376 2.01596 18.8742 0.5 22.2872 0.5Z'\n        fill='white'\n        stroke='#D0D0D8'\n      />\n      <text x='50%' y='55%' dominantBaseline='middle' textAnchor='middle'>\n        ${text}\n      </text>\n    </svg>\n  )\n}\n\nconst ScoreButton: React.FC<IAnswerButtonProps> = ({\n  text,\n  state,\n}: IAnswerButtonProps) => {\n  return (\n    <ButtonContainer state={state}>\n      <Button text={text} />\n      <hr className='hr1' />\n      <hr className='hr2' />\n    </ButtonContainer>\n  )\n}\n\nexport default ScoreButton\n","import ScoreButtons from './ScoreButtons'\n\nexport default ScoreButtons\n","import styled from 'styled-components'\n\nimport { black100 } from '../../styles'\n\nconst Ð¡ontainer = styled.div`\n  width: 50px;\n  display: flex;\n  justify-content: center;\n  .ham {\n    cursor: pointer;\n    -webkit-tap-highlight-color: transparent;\n    transition: transform 400ms;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n  .hamRotate.active {\n    transform: rotate(45deg);\n  }\n  .hamRotate180.active {\n    transform: rotate(180deg);\n  }\n  .line {\n    fill: none;\n    transition: stroke-dasharray 400ms, stroke-dashoffset 400ms;\n    stroke: ${black100};\n    stroke-width: 5.5;\n    stroke-linecap: round;\n  }\n  .ham1 .top {\n    stroke-dasharray: 40 139;\n  }\n  .ham1 .bottom {\n    stroke-dasharray: 40 180;\n  }\n  .ham1.active .top {\n    stroke-dashoffset: -98px;\n  }\n  .ham1.active .bottom {\n    stroke-dashoffset: -138px;\n  }\n`\nexport default Ð¡ontainer\n","import HumburgerButton from './HumburgerButton'\n\nexport default HumburgerButton\n","import React, { MouseEvent } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { Dispatch } from '../../store'\nimport Ð¡ontainer from './style'\n\nconst HumburgerButton: React.FC = () => {\n  const { changeVisibility } = useDispatch<Dispatch>().menu\n  const hendleClick = (e: MouseEvent): void => {\n    e.currentTarget.classList.toggle('active')\n  }\n  return (\n    <Ð¡ontainer onClick={() => changeVisibility()}>\n      <svg\n        className='ham hamRotate ham1'\n        viewBox='0 0 100 100'\n        width='50'\n        onClick={hendleClick}\n      >\n        <path\n          className='line top'\n          d='m 30,33 h 40 c 0,0 9.044436,-0.654587 9.044436,-8.508902 0,-7.854315 -8.024349,-11.958003 -14.89975,-10.85914 -6.875401,1.098863 -13.637059,4.171617 -13.637059,16.368042 v 40'\n        />\n        <path className='line middle' d='m 30,50 h 40' />\n        <path\n          className='line bottom'\n          d='m 30,67 h 40 c 12.796276,0 15.357889,-11.717785 15.357889,-26.851538 0,-15.133752 -4.786586,-27.274118 -16.667516,-27.274118 -11.88093,0 -18.499247,6.994427 -18.435284,17.125656 l 0.252538,40'\n        />\n      </svg>\n    </Ð¡ontainer>\n  )\n}\n\nexport default HumburgerButton\n","import { Game } from '../../models/game'\nimport { RootState } from '../../store'\n\nconst selectState = (\n  state: RootState\n): { isShow: boolean; gameData: Game } => ({\n  isShow: state.menu,\n  gameData: state.game.gameData,\n})\nexport default selectState\n","import Game from './Game'\n\nexport default Game\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport { Wrapper, Main, Answers, Question, Scoreboard, Menu } from './styles'\nimport AnswerButton from '../../components/AnswerButtons'\nimport ScoreButton from '../../components/ScoreButtons'\nimport Humberger from '../../components/HumburgerButton'\nimport data from '../../game.json'\nimport { IGame } from '../../models/game'\nimport selectState from './selectors'\n\nconst Game: React.FC = () => {\n  const { gameData, isShow } = useSelector(selectState)\n\n  const checkPassed = (answer: { id: number }) => {\n    if (answer.id === gameData[0].id) return 'checked'\n    if (gameData.findIndex((x: IGame) => x.id === answer.id) === -1)\n      return 'passed'\n\n    return ''\n  }\n\n  if (!gameData) return <Redirect to='/' />\n  if (gameData.length === 0) return <Redirect to='/result' />\n  return (\n    <Wrapper>\n      <Main>\n        <Menu>\n          <Humberger />\n        </Menu>\n        <Question>\n          <h1>{gameData[0]?.question}</h1>\n        </Question>\n        <Answers>\n          {gameData[0]?.answers.map((answer) => (\n            <AnswerButton\n              key={answer.id}\n              isRight={answer.isRight}\n              name='A'\n              text={answer.text}\n            />\n          ))}\n        </Answers>\n      </Main>\n      <Scoreboard isShow={isShow}>\n        {data.map((answer) => (\n          <ScoreButton\n            state={checkPassed(answer)}\n            key={answer.id}\n            text={answer.cost}\n          />\n        ))}\n      </Scoreboard>\n    </Wrapper>\n  )\n}\n\nexport default Game\n","import styled from 'styled-components'\n\nimport { black100 } from '../../styles'\n\nconst Text = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 45%;\n  height: 258px;\n  min-width: 300px;\n  & h3 {\n    margin: 0;\n    font-weight: 600;\n    font-size: 32px;\n    opacity: 0.5;\n    color: ${black100};\n  }\n  & h1 {\n    margin: 10px 0 50px 0;\n  }\n  @media (min-width: 1921px) {\n    width: 40%;\n    align-items: center;\n  }\n  @media (max-width: 768px) {\n    align-items: center;\n  }\n`\nexport default Text\n","import { RootState } from '../../store'\n\nconst selectState = (\n  state: RootState\n): {\n  round: {\n    question: null\n    cost: null\n    answers: null\n    id: null\n  }\n} => ({\n  round: state.round,\n})\nexport default selectState\n","import Result from './Result'\n\nexport default Result\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport Text from './styles'\nimport hand from '../../img/hand.png'\nimport TextWithButton from '../../components/TextWithButton'\nimport { Wrapper, Main, Img } from '../Home/styles'\nimport selectState from './selectors'\n\nconst Result: React.FC = () => {\n  const { round } = useSelector(selectState)\n  return (\n    <Wrapper>\n      <div className='bg' />\n      <Main>\n        <Img>\n          <img src={hand} alt='hand' />\n        </Img>\n        <Text>\n          <h3>Total score:</h3>\n          <TextWithButton\n            title={`$${round ? round.cost : 0} earned`}\n            btnText='Play again'\n          />\n        </Text>\n      </Main>\n    </Wrapper>\n  )\n}\n\nexport default Result\n","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\n\nimport Home from './pages/Home'\nimport Game from './pages/Game'\nimport Result from './pages/Result'\nimport { Dispatch } from './store'\nimport { GlobalStyle } from './styles'\n\nconst App: React.FC = () => {\n  const { round, game } = useDispatch<Dispatch>()\n  useEffect(() => {\n    game.fetchGameData()\n    round.fetchRoundData()\n  }, [game, round])\n  return (\n    <>\n      <GlobalStyle />\n      <Router>\n        <Switch>\n          <Route path='/' exact>\n            <Home />\n          </Route>\n          <Route path='/game'>\n            <Game />\n          </Route>\n          <Route path='/result'>\n            <Result />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  )\n}\n\nexport default App\n","import menu from './menu'\nimport game from './game'\nimport disableRound from './disableRound'\nimport round from './round'\n\nexport default { menu, game, disableRound, round }\n","export default {\n  state: false,\n  reducers: {\n    changeVisibility: (state: boolean): boolean => !state,\n  },\n}\n","export interface IGame {\n  question: string\n  cost: string\n  answers: {\n    text: string\n    isRight: boolean\n    id: number\n  }[]\n  id: number\n}\n\nexport type Game = Array<IGame>\nexport type StateGame = { gameData: Game }\nexport default {\n  state: {\n    gameData: [\n      {\n        question: '',\n        cost: '',\n        answers: [\n          {\n            text: '',\n            isRight: false,\n            id: 1,\n          },\n        ],\n        id: 1,\n      },\n    ],\n  },\n  reducers: {\n    levelPassed: (state: StateGame): { gameData: Game } => {\n      const data = state.gameData.slice(1)\n      localStorage.setItem('game', JSON.stringify(data))\n      return {\n        ...state,\n        gameData: data,\n      }\n    },\n    setGameData: (state: StateGame, payload: Game): StateGame => {\n      return { ...state, gameData: payload }\n    },\n    fetchGameData: (state: StateGame): StateGame => {\n      let localGame = localStorage.getItem('game')\n      if (localGame) {\n        localGame = JSON.parse(localGame)\n      }\n      return { ...state, gameData: (localGame as unknown) as Game }\n    },\n  },\n}\n","export default {\n  state: false,\n  reducers: {\n    setDisable: (state: boolean, payload: boolean): boolean => payload,\n  },\n}\n","import { IGame } from './game'\n\nexport default {\n  state: {\n    question: null,\n    cost: null,\n    answers: null,\n    id: null,\n  },\n  reducers: {\n    setRound: (state: IGame, payload: IGame): IGame => {\n      localStorage.setItem('round', JSON.stringify(payload))\n      return payload\n    },\n    fetchRoundData: (): IGame => {\n      let localRound = localStorage.getItem('round')\n      if (localRound) {\n        localRound = JSON.parse(localRound)\n      }\n      return (localRound as unknown) as IGame\n    },\n  },\n}\n","import { init, RematchDispatch, RematchRootState } from '@rematch/core'\nimport models from './models'\n\nexport const store = init({\n  models,\n})\n\nexport type Store = typeof models\nexport type Dispatch = RematchDispatch<typeof models>\nexport type RootState = RematchRootState<typeof models>\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport { store } from './store'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}